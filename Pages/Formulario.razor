@page "/formulario"
@attribute [Authorize(Roles = "User")]
@using TCD.Data
@using TCD.Authentication
@inject PerguntaServices service
@inject NavigationManager navigationManager
@inject IJSRuntime js

<PageTitle>Formulário</PageTitle>

<h1>Formulário</h1><br>

<div class="container-fluid">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark" style="background-color: #D3D3D3">
                <tr>
                    <th>Perguntas</th>
                    <th class="text-center">Resposta</th>
                </tr>
            </thead>
            <tbody>
                @if (Perguntas.Any())
                {
                    @foreach (var perg in Perguntas)
                    {
                        <tr>
                            <td>@perg.Texto</td>
                            <td class="text-center">

                                @for (double i = 1; i <= 5; i++)
                                {
                                    double valorAtual = i;
                                    <label style="margin-right: 7%;">
                                        <input class="form-check-input" type="radio" name="@($"resposta_{perg.Id}")" value="@valorAtual" @onchange="() => AtualizarNota(perg.Id, valorAtual)" disabled="@desabilitarMarcacoes">
                                        <div style="font-weight: bold;">@i</div>
                                    </label>
                                }

                            </td>
                        </tr>
                    }
                    <br>
                    <button type="button" class="btn btn-primary" @onclick="EnviarRespostas">Enviar Respostas</button>
                }
                else
                {
                    <tr>
                        <td colspan="2"><strong>Nenhuma pergunta disponível...</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    List<Pergunta> Perguntas = new List<Pergunta>();
    bool desabilitarMarcacoes = false;

    protected override async Task OnInitializedAsync()
    {
        await AtualizaPerguntas();
    }

    private async Task AtualizaPerguntas()
    {
        Perguntas = await service.RetornaPerguntaSelecionadaAsync();
    }

    private void AtualizarNota(int perguntaId, double nota)
    {
        var pergunta = Perguntas.FirstOrDefault(p => p.Id == perguntaId);
        if (pergunta != null)
        {
            pergunta.Avaliacao += nota;
            //Console.WriteLine("Nota: " + nota);
        }
    }

    private async Task EnviarRespostas()
    {
        foreach (var perg in Perguntas)
        {
            await service.UpdateAvaliacaoAsync(perg.Id, perg.Avaliacao);
        }
        await js.InvokeVoidAsync("alert", "Respostas Envidas com Sucesso!");
        desabilitarMarcacoes = true;
    }

}