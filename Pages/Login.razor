@page "/login"
@using TCD.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<style>
    .cd-link a{
        text-decoration: none;
    }
</style>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 texte-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" type="text" class="form-control" placeholder="UserName" autofocus/>
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" type="submit" class="btn btn-primary">Login</button>
        </div>
        <!--<div class="mb-3 cd-link">
            <p>Não tem conta? <NavLink href="/cadastro">Cadastre-se aqui...</NavLink> </p> 
        </div>-->
    </div>
</div>

@code {

    private class Model{
        public string UserName {get; set;}
        public string Password {get; set;}
    }

    private Model model = new Model();

    private async Task Authenticate(){
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if( userAccount == null || userAccount.Password != model.Password ){
            await js.InvokeVoidAsync("alert", "Nome de Usuário ou Senha Inválidos!");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role,
                Email = userAccount.Email
            });
        navManager.NavigateTo("/", true);
    }
}