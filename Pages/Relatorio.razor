@page "/relatorio"
@attribute [Authorize(Roles = "Administrator")]
@using TCD.Data
@using TCD.Authentication
@inject PerguntaServices service
@inject NavigationManager navigationManager
@inject IJSRuntime js

<PageTitle>Relatório</PageTitle>

<h1>Relatório</h1><br>

<div class="container-fluid">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark" style="background-color: #D3D3D3">
                <tr>
                    <th>Perguntas</th>
                    <th class="text-center">Num. de Avaliações</th>
                    <th class="text-center">Nota Média</th>
                </tr>
            </thead>
            <tbody>
                @if (Perguntas.Any())
                {
                    @foreach (var perg in Perguntas)
                    {   
                        double? media = @perg.Avaliacao / @perg.NumAvaliacoes;
                        <tr>
                            <td>@perg.Texto</td>
                            <td class="text-center"> @perg.NumAvaliacoes </td>
                            <td class="text-center"> 
                                @if(perg.NumAvaliacoes != 0){
                                    @media?.ToString("F1")
                                }else{
                                    <span>Ainda não avaliado</span> 
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3"><strong>Nenhuma pergunta disponível...</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    List<Pergunta> Perguntas = new List<Pergunta>();

    protected override async Task OnInitializedAsync()
    {
        await AtualizaPerguntas();
    }

    private async Task AtualizaPerguntas()
    {
        Perguntas = await service.RetornaPerguntaAsync();
    }
}

